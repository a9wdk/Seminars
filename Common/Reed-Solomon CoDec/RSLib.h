//************************************************************[0x083F3C2E24]***
// Канонический кодек Рида-Соломона, адаптированный для целей защиты ПО. 
// Поддерживаются режимы RS8 и RS16, позволяющие работать с кадрами данных
// размером до 256 байт (быстро) и до 128 Кбайт (медленнее) соответственно.
//
// RSLib.h - Декларация функций библиотеки RSLib, версия M.03.17
//
// Автор - Сергей Усков (a9wdk@yandex.ru, Telegram: @a9wdk)
//*****************************************************************************

#ifndef __RSLIB_H__
#define __RSLIB_H__

// Версия библиотеки.
#define FULL		// FULL - полная версия (кодер-декодер).
					// LITE - только декодер.

// Режим работы кодека.
#define RS16 		// RS8  - Режим RS8, используется  GF(2^8)  - поле Галуа размером в 256 байт,  
					// RS16 - Режим RS16, используется GF(2^16) - поле Галуа размером в 128 Кбайт, 

#ifdef RS8 
	#define INIT_POLY	0x011D			// Полином начальной инициализации поля Галуа (X^8 + X^4 + X^3 + X^2 + X^0)
	#define GF_TYPE		BYTE			// Тип элементов поля Галуа, кадра данных и внутренних массивов
	#define	GF_SIZE		0x100			// Размер поля Галуа - 256 байт
	#define ECC_MAX		0xAA			// Максимальная длина ECC в байтах (2/3 от GF_SIZE - делать больше нет смысла)
#endif

#ifdef RS16 
	#define INIT_POLY	0x01100B		// Полином начальной инициализации поля Галуа (X^16 + X^12 + X^3 + X^1 + X^0)
	#define GF_TYPE		WORD			// Тип элементов поля Галуа, кадра данных и внутренних массивов
	#define	GF_SIZE		0x10000			// Размер поля Галуа - 65536 слов (128 Кбайт)
	#define ECC_MAX		0xAAAA			// Максимальная длина ECC в словах (2/3 от GF_SIZE - делать больше нет смысла)
#endif

#define GF_MAX_INDEX	(GF_SIZE - 1)
#define SizeInBytes(a)	((a) * sizeof(GF_TYPE))								

//========================================= Основные функции =====================================================

// Инициализация библиотеки под заданый размер ECC. Может вызываться неограниченное
// количество раз для перенастройки библиотеки под новый размер ECC без соответствующего
// вызова RSLibClose(). При использовании режима RS16 с длиной ЕСС более 3-4 Кбайт можно 
// ускорить инициализацию, использовав сохраненный ранее при помощи функции RSGetGenPoly()
// порождающий полином. Необходимо следить, чтобы порождающий полином соответствовал 
// используемой в данной сессии длине ECC, иначе работа кодека будет некорректной.
// Если использование сохраненного заранее полинома не предполагается, вместо третьего 
// параметра нужно указать NULL, и полином будет расчитан в процессе инициализации.
void RSLibInit(DWORD datalen, DWORD ecclen, BYTE *genpoly);

// Расчет кода коррекции ошибок для заданной длины ECC
#ifdef FULL 
void RSCalcECC(BYTE *data, BYTE *ecc);
#endif // FULL

// Проверка целостности кадра данных (data + ecc).
DWORD RSCheckData(BYTE *data, BYTE *ecc);

// Восстановление измененных элементов кадра данных
DWORD RSRepairData(BYTE *data, BYTE *ecc);

// Освобождение ресурсов, закрытие библиотеки. Вызывается один
// раз, когда использование библиотеки далее не предполагается.
void RSLibClose(void);

//======================================= Вспомогательные функции ================================================

// Функция возвращает количество исправленных ошибок. Вызывать её 
// следует после функции RepairData(), иначе результат не определён.
DWORD RSGetErrors(void);

// Функция возвращает процент готовности расчета порождающего полинома. Актуально для 
// режима RS16 при длине ЕСС более 3-4 Кбайт для контроля состояния процесса, т.к. расчет
// в этом случае может занять значительное время. Вызывать её следует из другого потока
// во время работы функции RSLibInit(), использование в другое время лишено смысла.
DWORD RSGenPolyPercentReady(void);

// Функция сохраняет расчитанный порождающий полином в указанный массив, длина равна
// ecclen + 1. Сохраненный полином в дальнейшем может использоваться сразу, а не 
// генерироваться при инициализации библиотеки. Вызывать её следует после функции 
// RSLibInit(), но до вызова функции RSLibClose().
void RSGetGenPoly(BYTE *genpoly);

#endif // __RSLIB_H__